<?xml version="1.0" encoding="UTF-8"?>
<jsrllib lang="zh_CN">
	<template name="Entry.tutorial.basics"><![CDATA[
		@Ix{"Section", "JSRL模板的呈现过程和模板作用域"}
			
			@Ix{"Figure", "fig:render_process", @"figures/render-process.jpg"}
				JSRL模板的呈现过程
			@E
			
			@Ix{"Paragraph"}
				@I{"Concept", "呈现"}是JSRL的一个核心过程。
				在@I{"EntryLink", "tutorial.overview"}中已经给出了一个简单的JSRL模板及其呈现方法。
				@I{"Ref", "fig:render_process"}用一个更简单的例子图示了JSRL模板的呈现过程。
				JSRL引擎接收两个输入——JSRL模板和输入参数，引擎可以将指定的模板在给定的输入参数下进行呈现，对于呈现后生成HTML，@I{"EntryLink", "ref.api.render"}函数可以通过DOM将其放到页面中。
			@E
			
			@Ix{"Paragraph"}
				JSRL模板的呈现过程，类似于一个命令式语言程序的执行过程，是遵循从前向后的顺序。
				JSRL支持分支、循环等各种丰富的控制标签，可以控制呈现的流程。
				对于常见的命令式语言的函数（方法）而言，往往每个函数（方法）确立了一个作用域，该作用域中的局部变量在函数（方法）执行时可以被读写，函数（方法）返回后即不再存在。
				类似地，在一个JSRL模板呈现的过程中，会形成一个@I{"Concept", "模板作用域"}，前面例子中以@I{"Verb", "$"}开头的变量，都是模板作用域中的变量。
				@I{"Verb", "$0"}、@I{"Verb", "$1"}这样的输入参数和@I{"Verb", "$i"}、@I{"Verb", "$p"}这样的在呈现过程中生成的变量都属于模板作用域中的变量。
			@E

		@E

		@Ix{"Section", "JSRL标签的基本语法"}
			@Ix{"SubSection", "标签与标签实例"}

				@Ix{"Paragraph"}
					@I{"EntryLink", "tutorial.overview"}一节的例子中已经给出了一些最简单的JSRL模板。
					从中可以看出，JSRL模板中，动态的内容都是以@I{"Verb", "@"}开头的，这些表示的是JSRL@I{"Concept", "标签"}。
					JSRL标签有很多种，用名字来区分，例如@I{"Verb", "@for"}和@I{"Verb", "@end_for"}就属于两种不同的标签。
					JSRL模板中对标签的一处使用称为该标签的一个@I{"Concept", "实例"}。
					 
					JSRL标签实例的一般形式为：

					@Ix{"Def"}
						@I{"DefSym", "@"}
						@I{"DefVar", "标签名"} 
						@I{"DefSym", "{"}
						@I{"DefVar", "参数"}
						@I{"DefSym", ","} 
						@I{"DefVar", "参数"}
						@I{"DefSym", ","} 
						......
						@I{"DefSym", "}"}
					@E
				@E
				
				@Ix{"Paragraph"}
					不同的标签具有不同的功能，也需要接收不同个数和类型的参数。
					参数具有@I{"Concept", "表达式"}、@I{"Concept", "语句"}、@I{"Concept", "左值"}、@I{"Concept", "属性"}等几种类型，其中前三种类型都会在下面介绍，而属性类型将在@I{"EntryLink", "tutorial.ctrls"}一章介绍。
					此外，不少标签允许接收空参数，空出相应位置就表示一个空参数，例如，@I{"Verb", "@some_tag{value1, , value2}"}就表示共有3个参数，其中第2个为空，@I{"Verb", "@some_tag{}"}则表示仅有1个参数且为空。
					如果省略后面的大括号，例如@I{"Verb", "@some_tag"}，则表示参数个数为0。
					对于大部分标签而言，少提供一个参数和将最后一个参数设为空是等价的，因此@I{"Verb", "@some_tag{}"}和@I{"Verb", "@some_tag"}一般是等价的。
				@E
			@E

			@Ix{"SubSection", "参数类型——表达式"}
				
				@Ix{"Paragraph"}
					@I{"Concept", "表达式"}是最常见的参数类型。
						参数中的表达式的语法与Javascript表达式的语法基本一样，可以使用任何Javascript运算符、引用任何全局变量（在网页中的全局变量即window对象的成员）。
						与普通的Javascript表达式的一个显著区别在于，在作为JSRL标签参数的表达式中，可以引用模板作用域中的变量。
				@E

				@Ix{"Paragraph"} 
					每个JSRL模板在呈现的过程中，都会形成一个相应的@I{"Concept", "模板作用域"}。
					模板作用域的生存周期与当前模板的呈现过程相始终。
					板作用域中的变量需以@I{"Verb", "$"}开头来引用，分为两类：
				@E

				@Ix{"Enumerate"}
					@Ix{"Item"}
						@I{"Verb", "$"}后跟数字：用来引用模板的参数，@I{"Verb", "$0"}为第一个参数，@I{"Verb", "$1"}为第二个参数，依此类推。
						注意，这里所说的模板的参数，不同于标签的参数。
						如有疑问，请回顾@I{"EntryLink", "tutorial.overview"}中的例子。
					@E

					@Ix{"Item"}
						@I{"Verb", "$"}后跟标识符：用来引用模板作用域中的其他变量，这些变量往往是在呈现模板的过程中被赋值的，例如在表达式中使用Javascript的赋值运算符(@I{"Verb", "="})就能够做到。
					@E
				@E
				
				@Ix{"Paragraph"}
					如果在表达式中需要出现本来意义的@I{"Verb", "$"}，例如需要引用的一个Javascript标识符本身就包含@I{"Verb", "$"}，那么需要将其写为@I{"Verb", "$$"}。
					在Javascript字符串和正则表达式中的@I{"Verb", "$"}无需做此处理。
				@E

				@Ix{"Paragraph"}
					例如，下面都是合法的表达式：
				@E

				@Ix{"Itemize"}
					@Ix{"Item"}@I{"Verb", "Param.id"}@E
					@Ix{"Item"}@I{"Verb", "10"}@E
					@Ix{"Item"}@I{"Verb", "\"abc\""}@E
					@Ix{"Item"}@I{"Verb", "$0.name"}@E
					@Ix{"Item"}@I{"Verb", "$i + 1"}@E
				@E

			@E

			@Ix{"SubSection", "参数类型——语句"}
				
				@Ix{"Paragraph"}
					@I{"Concept", "语句"}的语法与Javascript语句的语法基本一致，此外它也可以像表达式那样引用模板作用域中的变量。
					事实上，所有的表达式也都能够作为语句，因为Javascript的表达式都可以作为独立的Javascript语句，称为表达式语句。
					所有语句最后的分隔符@I{"Verb", ";"}都是可以省略的。
					语句也可以是一个复合语句，这样在一个语句中可以包括比较复杂的内容。
				@E

				@Ix{"Paragraph"}
					下面是一些合法语句的例子：
				@E

				@Ix{"Itemize"}
					@Ix{"Item"}@I{"Verb", "alert(\"Hi\")"}@E
					@Ix{"Item"}@I{"Verb", "if ($0 == null) alert($0.name)"}@E
					@Ix{"Item"}@I{"Verb", "{ var t = $a; $a = $b; $b = t; }"}@E
				@E

			@E

			@Ix{"SubSection", "参数类型——左值"}
				
				@Ix{"Paragraph"}
					有些JSRL标签会设置某些对象的值，如@I{"Verb", "@set"}这一标签，它会设置当前的模板作用域中的一个变量的值。
					如@I{"Verb", "@set{x, 3}"}可以将模板作用域中的变量@I{"Verb", "$x"}设置为@I{"Verb", "3"}。
					在这样一个标签中，第一个参数并不是一个被求值的表达式，而是用来告诉标签设置哪个变量的值。
					这种参数类型就称为@I{"Concept", "左值"}。
				@E
				
				@Ix{"Paragraph"}
					不仅一个变量名可以是左值，对象的成员、数组的元素也都允许是左值。
					也就是说：
				@E

				@Ix{"Itemize"}
					@Ix{"Item"}标识符可以是左值，如@I{"Verb", "x"}；@E
					@Ix{"Item"}如果@I{"DefVar", "lval"}是左值，@I{"DefVar", "fld"}是一个标识符，则@I{"DefVar", "lval"}@I{"DefSym", "."}@I{"DefVar", "fld"}也是左值，如@I{"Verb", "x.height"}；@E
					@Ix{"Item"}如果@I{"DefVar", "lval"}是左值，@I{"DefVar", "expr"}是一个JSRL表达式，则@I{"DefVar", "lval"}@I{"DefSym", "["}@I{"DefVar", "expr"}@I{"DefSym", "]"}也是左值，如@I{"Verb", "x[$i]"}，@I{"Verb", "x.s[$i]"}，@I{"Verb", "x[$i].t[$j]"}。@E
				@E

				@Ix{"Paragraph"}
					当一个左值被设置时，如果构成它的基本对象还不存在，则会被自动创建。
					例如，对于下面这样一个标签实例：
					@I{"CodeSeg", "jsrl", "@set{building.room[$i].area, 20}"}
					在呈现到该标签时，若@I{"Verb", "$building"}尚不存在，则JSRL呈现引擎会自动创建一个空对象，赋给@I{"Verb", "$building"}。
					随后，引擎会检查@I{"Verb", "$building.room"}是否存在，若不存在，则引擎会自动创建一个空数组，赋给@I{"Verb", "$building.room"}。
					最后，再将@I{"Verb", "20"}赋给@I{"Verb", "building.room[$i].area"}。
					这种机制在使用左值为JSRL控件命名时，带来了很大的便利，这在@I{"EntryLink", "tutorial.ctrls"}一章中会详细讨论。
				@E

			@E

		@E

		@Ix{"Section", "求值标签"}

			@Ix{"Paragraph"}
				最基本的求值标签是@I{"EntryLink", "ref.tag._expr"}，它接受一个JSRL表达式作为参数，呈现时会将表达式的值输出。
				值得一提的是，该标签会自动将HTML的特殊控制字符进行转义，包括@I{"Verb", "<"}、@I{"Verb", ">"}、@I{"Verb", "\""}和@I{"Verb", "&"}，例如@I{"Verb", "<"}会被转义为@I{"Verb", "&lt;"}。
				它还会将部分连续空格转义为@I{"Verb", "&nbsp;"}，使得文本中出现的连续空格也能够被原样呈现。
				但它不会对换行符（@I{"Verb", "'\\n'"}）进行任何特殊处理。
			@E

			@Ix{"Comment"}
				在网页设计时，如果在不应有换行的地方出现了换行，会使原先规划为单行的文本变为多行，破坏页面布局。
				因此对于相当多的动态文本，程序员需要避免其被折为多行。
				正是基于这样的考虑，@I{"EntryLink", "ref.tag._expr"}才不对换行符进行特殊处理，这样能够避免输入数据不确定性造成的页面布局变化。
			@E

			@Ix{"Paragraph"}
				在有些场合，需要显示一段多行文本，这需要借助另一个标签@I{"EntryLink", "ref.tag._htmlize"}，该标签与@I{"EntryLink", "ref.tag._expr"}唯一区别在于，它会将换行符转化为@I{"Verb", "<br/>"}。
			@E

			@Ix{"Paragraph"}
				另一个类似的标签是@I{"EntryLink", "ref.tag.html"}，该标签与前两者的区别是，它不会做任何转义工作，而是直接将表达式求值后作为HTML呈现出来，因此可以用来呈现一段带格式的HTML。
			@E

			@Ix{"Notice"}
				使用@I{"EntryLink", "ref.tag.html"}存在一定的风险，特别是其输入源自最终用户时，一定要避免不良用户通过这个途径破坏页面的结构甚至在其他用户的客户端执行恶意脚本，因此在服务器端必须对可能通过@I{"EntryLink", "ref.tag.html"}显示的文本进行严格的安全检查。
			@E

			@Ix{"CodeFile", "code:eval_tags_html", "eval-tags.html", "html"}
				几种求值标签的示例代码
			@E
		@E

		@Ix{"Section", "执行标签"}

		@E

		@Ix{"Section", "流程控制标签"}

		@E
		
	]]></template>
</jsrllib>
